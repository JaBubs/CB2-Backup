[gcode_macro SHUTDOWN]
description: CYD_SCREEN_MACRO
gcode:
    {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown


[gcode_macro PAUSE]
description: CYD_SCREEN_MACRO
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=Filament_Sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
description: CYD_SCREEN_MACRO
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=Filament_Sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  # Turn off all heaters
  TURN_OFF_HEATERS
  # Turn off the part cooling fan
  M106 S0
  # Cancel the base print process
  CANCEL_PRINT_BASE
  # Retract 10mm
  G1 E-10
  # Move Printhead away
  G1 X0 Y200 F5500
  # Optionally lift the Z-axis for clearance
  G91
  G1 Z10 F600  ; Lift Z by 10mm
  G90
  # Disable steppers
  M18
  

[gcode_macro Change_Bed]
description: CYD_SCREEN_MACRO
gcode:
    G1 X0 Y201 F12000
    G1 Z200 F900
    
[gcode_macro UNLOAD_FILAMENT]
description: CYD_SCREEN_MACRO
gcode:
    M104 S200                  ; Set extruder temperature to 200°C
    M109 S200                  ; Wait for extruder temperature to reach 200°C
    G92 E0                      ; Reset the extruder position
    G1 E-50 F300              ; Retract the filament by 120mm at a speed of 300mm/min
    G92 E0                      ; Reset the extruder position again
    M104 S0                    ; Turn off the extruder heater (optional)

[gcode_macro LOAD_FILAMENT]
gcode:
    M104 S200                  ; Set extruder temperature to 200°C
    M109 S200                  ; Wait for extruder temperature to reach 200°C
    G92 E0                      ; Reset the extruder position
    G1 E50 F300               ; Feed 50mm of filament at a speed of 300mm/min
    G92 E0                      ; Reset the extruder position again
    M104 S0                    ; Turn off the extruder heater (optional)

# [gcode_macro EXTRUDE_10MM]
# description: CYD_SCREEN_MACRO
# gcode:
#     M104 S200                 ; Heat extruder to 200°C
#     M109 S200                 ; Wait for extruder to reach 200°C
#     G92 E0                    ; Reset extruder position
#     G1 E10 F300               ; Extrude 10mm of filament
#     G92 E0                    ; Reset extruder position

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    

[gcode_macro PROBE_DOWN]
description: CYD_SCREEN_MACRO
gcode:
    SET_PIN PIN=probe_enable VALUE=1

[gcode_macro PROBE_UP]
description: CYD_SCREEN_MACRO
gcode:
    SET_PIN PIN=probe_enable VALUE=0

[gcode_macro Z_TILT]
description: CYD_SCREEN_MACRO
gcode:
    Z_TILT_ADJUST

[gcode_macro START_PRINT]
gcode:
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Case_Fan TARGET=30
    SET_LED LED=board_rgb GREEN=0.922 RED=0 BLUE=1
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    # Start bed heating (but don't wait for it)
    M140 S {BED_TEMP}
    # Kinda heat the nozzle, but dont wait
    M104 S 150
    # Use absolute coordinates
    G90
    # Use extruder relative mode
    M83
    # Home the printer
    G28
    # Z TILT ADJUST
    Z_TILT_ADJUST
    # Level the bed
    BED_MESH_CALIBRATE
    # Load The Bed Mesh
    BED_MESH_PROFILE LOAD=default
    # Change Max Accel Before Smart Park And Purge
    SET_ACCEL_BEFORE_PARK
    # KAMP Smart Park
    SMART_PARK
    # Wait for bed to reach temperature
     M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
     M109 S{EXTRUDER_TEMP}
    # Set Slightly Higher Retraction For Purge
    SET_RETRACTION RETRACT_LENGTH=2.0
    # KAMP Adaptive Purge Line
    LINE_PURGE
    # Restore Max Accel Before Printing
    RESTORE_ACCEL
    # Restore Origiinal Retraction Settings
    SET_RETRACTION RETRACT_LENGTH=0.8
    
[gcode_macro END_PRINT]
gcode:
    # Reset Skew Correction
    SET_SKEW CLEAR=1
    # Park Print Head
    G1 X0 Y200 F4800
    # Retract 4mm
    G1 E-10 F500
    # Raise Z 50mm
    {% set z_move = printer.gcode_move.gcode_position.z|float + 2 %}
    {% if z_move > printer.configfile.settings.stepper_z.position_max|float %}
        {% set z_move = printer.configfile.settings.stepper_z.position_max|float %}
    {% endif %}
    G1 Z{ z_move } F600 
    {% set z_move = printer.gcode_move.gcode_position.z|float + 50 %}
    {% set max_z = printer.configfile.settings.stepper_z.position_max|float - 10 %}
    {% if z_move > max_z %}
        {% set z_move = max_z %}
    {% endif %}
    G1 Z{ z_move } F600
    # Turn Off Heatbed
    M140 S0
    # Turn Off Hotend Heater
    M104 S0
    # Turn Off Fan
    M107
    # Disable Steppers
    M84 X Y Z E 
    # Set Case fan target to 40
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Case_Fan TARGET=40
    
[gcode_macro SET_ACCEL_BEFORE_PARK]
gcode:
   SET_VELOCITY_LIMIT ACCEL=7000

[gcode_macro RESTORE_ACCEL]
gcode:
   SET_VELOCITY_LIMIT ACCEL=15000

[gcode_macro ADJUST_Z_HOP]
description: Adjust Z Hop height for firmware retraction
variable_current_z_hop: 0.0
variable_increment: 0.2

gcode:
    {% set current_z_hop = printer["gcode_macro ADJUST_Z_HOP"].current_z_hop %}
    {% set increment = printer["gcode_macro ADJUST_Z_HOP"].increment %}
    {% set new_z_hop = params.INCREMENT|default(current_z_hop + increment)|float %}
    
    SET_RETRACTION Z_HOP_HEIGHT={new_z_hop}
    SET_GCODE_VARIABLE MACRO=ADJUST_Z_HOP VARIABLE=current_z_hop VALUE={new_z_hop}
    M117 Z Hop set to {new_z_hop} mm



    


#ඩා sus